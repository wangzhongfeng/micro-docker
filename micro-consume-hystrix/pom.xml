<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.docker.consume</groupId>
	<artifactId>consumehystrix</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>micro-consume-hystrix</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.1.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<spring.version>5.0.8.RELEASE</spring.version>
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Finchley.SR1</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
			<exclusions>
				<exclusion>
					<groupId>com.sun.jersey</groupId>
                    <artifactId>jersey-client</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jersey</groupId>
					<artifactId>jersey-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jersey.contribs</groupId>
					<artifactId>jersey-apache-client4</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<fork>true</fork>
				</configuration>
			</plugin>
			<!-- docker的maven插件，官网：https://github.com/spotify/docker-maven-plugin -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.13</version>
				<executions>
					<execution>
						<id>build-image</id>     <!--定义一个执行命令的id-->
						<phase>package</phase>   <!--绑定mvn的哪个命令-->
						<goals>
							<goal>build</goal>   <!--要执行的命令 -->
						</goals>
					</execution>
					<!--<execution>-->
					<!--<id>image-tag</id>-->
					<!--<phase>package</phase>-->
					<!--<goals>-->
					<!--<goal>tag</goal>      &lt;!&ndash;tag命令，相当于docker的tag命令&ndash;&gt;-->
					<!--</goals>-->
					<!--<configuration>-->
					<!--<image>microservice-eureka-server:0.0.1</image>   &lt;!&ndash;镜像名&ndash;&gt;-->
					<!--<newName>localhost:5000/microservice-eureka-server:0.0.1</newName>   &lt;!&ndash;打的标签名&ndash;&gt;-->
					<!--</configuration>-->
					<!--</execution>-->
					<!--<execution>-->
					<!--<id>package-push</id>-->
					<!--<phase>package</phase>-->
					<!--<goals>-->
					<!--<goal>push</goal>    &lt;!&ndash;相当于docker的push命令&ndash;&gt;-->
					<!--</goals>-->
					<!--<configuration>-->
					<!--<imageName>localhost:5000/microservice-eureka-server:0.0.1</imageName>  &lt;!&ndash;要push的镜像名&ndash;&gt;-->
					<!--</configuration>-->
					<!--</execution>-->
				</executions>
				<configuration>
					<forceTags>true</forceTags>    <!--覆盖相同标签镜像-->
					<!-- 注意imageName一定要是符合正则[a-z0-9-_.]的，否则构建不会成功 -->
					<!-- 详见：https://github.com/spotify/docker-maven-plugin    Invalid repository name ... only [a-z0-9-_.] are allowed-->
					<imageName>micro-business-consume-hystrix:0.0.1</imageName>
					<baseImage>lwieske/java-8</baseImage>
					<dockerHost>http://192.168.99.117:2375</dockerHost>
					<entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>

					<resources>
						<resource>
							<directory>src/main/java</directory>
							<includes>
								<include>**/*.xml</include>
							</includes>
						</resource>
						<resource>
							<directory>src/main/resources</directory>
							<includes>
								<include>**</include>
							</includes>
						</resource>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
					<!-- 与maven配置文件settings.xml一致 -->
					<!--<serverId>my-docker-hub</serverId>-->
					<!--<registryUrl>https://index.docker.io/v1/</registryUrl>-->

				</configuration>
			</plugin>

		</plugins>
	</build>

</project>
